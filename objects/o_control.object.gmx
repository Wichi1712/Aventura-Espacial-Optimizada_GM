<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables de juego
estadoJuego = "menu";
nivelJuego = 0;
vidaPlayer = 3;
posIniX = room_width/2;
posIniY = room_height - 40;
alarm[0] = -1;//alarma desactivada para roca
alarm[1] = -1;//alarma desactivada para nave enemiga
alarm[2] = -1;//alarma desactivada para medusa
alarm[3] = -1;//alarma desactivada para jefe final
score = 0;

//Esto para barra de energia
//max_hp = 150;
//health = 150;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crea jefe final
if ( !instance_exists(o_liderEnemigo)){
    instance_create( room_width/2,-10,o_liderEnemigo);
    nivelJuego = 4;
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crea medusa
randomize();
posX = random_range(32, room_width - 32);
instance_create(posX, 0, o_medusa);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crea enemigo0(nave enemiga)
randomize();
posX = random_range(32, room_width - 32);
instance_create(posX, 0, o_enemy0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crea roca
randomize();
instance_create( random_range( 32,room_width-32), 0,o_roca);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control de niveles
var alar0 = 30;
var alar1 = 50;
var alar2 = 50;
switch (estadoJuego)
{
    case "menu":
    if(keyboard_check( vk_enter)){
        estadoJuego = "juego";
    }
    break;
      
    case "juego":
    //Mantiene la variable vidaPlayer en cero al llegar a cero
        if(vidaPlayer &lt;= 0){
            vidaPlayer = 0;
            estadoJuego = "gameOver";
        }
    
        switch (nivelJuego)
          {
              case 0:
              if( score &lt; 150){
                //Reiniciamos la alarma
                if(alarm[0] == -1)alarm[0] = alar0;
              }else  nivelJuego = 1;
              break;
              
              case  1:
              if( score &lt; 300){
                //Reiniciamos la alarma
                if(alarm[1] == -1)alarm[1] = alar1;
              }else  nivelJuego = 2;
              break;
              
              case  2:
              if( score &lt; 500){
                //Reiniciamos la alarma
                if(alarm[2] == -1)alarm[2] = alar2;
              }else  nivelJuego = 3;
              break;
              
              case  3:
              //------Crea ataque masivo--------------
              if( score &lt; 900){
                //Reiniciamos las alarmas
                if(alarm[0] == -1)alarm[0] = alar0;
                if(alarm[1] == -1)alarm[1] = alar1;
                if(alarm[2] == -1)alarm[2] = alar2;
              }else {
              //Activa la alarma 3 para crear instancia de jefe final
              //y pasar al siguiente case
              if(alarm[3] == -1)alarm[3] = 300;
              }
              break;
              
              case  4:
              if ( !instance_exists(o_liderEnemigo)){
                  estadoJuego = "ganaste";
              }else
              if ( o_liderEnemigo.resistencia &lt;100){
                if(alarm[0] == -1)alarm[0] = 30;
              }
              
              break;
          }
      break;
      
      case "ganaste":
      if(keyboard_check( vk_enter)){
                game_restart();
      }
      break;
      
      case "gameOver":
      if(keyboard_check( vk_enter)){
                game_restart();
                //highscore_clear();
      }
      break;
      
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crea instancia de nave
if(!instance_exists(o_nave) &amp;&amp; vidaPlayer &gt; 0){
    instance_create(posIniX,posIniY,o_nave);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DESARROLLADOR-solo para pruebas
//if(keyboard_check( vk_enter)){
    //game_restart();
    //highscore_clear();
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD
draw_set_font( fnt_desarrollador);
draw_set_color( c_white);
draw_set_halign(fa_center);

draw_text( 230, 20, "Score: " + string(score));
draw_text( 380, 20, "Vidas: " + string(vidaPlayer));
draw_text( 40, 20,"Nivel: " + string( nivelJuego));

switch (estadoJuego)
{
    case "menu":
        draw_sprite( spr_titulo,0,room_width/2,room_height/4);
        draw_text( room_width/2,room_height/3 - 30, "Press ENTER");
        draw_text( room_width/2,room_height - 30, "creado por Wichi 2020");
    break;
    
    case "gameOver":
        if( vidaPlayer &lt;= 0){
            draw_text( room_width/2,room_height/2, "Game Over#Press ENTER");
        }
    break;
    
    case "ganaste":
        draw_text( room_width/2,room_height/2, "Congratulation#Press ENTER");
    break;
    //default: STATEMENT;
}
 
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Highscore
/*
//if( estadoJuego == "gameOver" || estadoJuego == "ganaste"){
    draw_highscore( room_width/2 - 100,250, room_width/2 + 100,550);
    
    highscore_add("primero", score);
    highscore_name("o_nave");
    highscore_value(score);
    //highscore_clear();
//}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Healthbar
//var pc;
//pc = (health / max_hp) * 100;
//draw_healthbar(50,630,400,640,pc,c_teal, c_red, c_yellow, 0,true,true);
/*

Argument--------------------Description

x1 =         The x coordinate of the left of the healthbar 
y1 =         The y coordinate of the top of the healthbar 
x2 =         The x coordinate of the right of the healthbar 
y2 =         The y coordinate of the bottom of the healthbar 
amount =     The variable which defines total health (between 0 and 100) 
backcol =    The color of the background for the bar 
mincol =     The color of the bar when at no health (0) 
maxcol =     The color of the bar when at full health (100) 
direction =  Where the bar is 'anchored' (0 = left, 1 = right, 2 = top, 3 = bottom) 
showback =   Whether the bar's background is drawn (true) or not (false). 
             If false, the backcol argument is disregarded. 
showborder = Whether the bar's elements have a 1px wide black border (true) or not (false). 



Description
=====================
With this function you can draw a colored bar to show a constant value. 
Although the function uses the word "healthbar" you can use this to display 
anything you wish as long as the amount to be displayed is a 
percentage value between 0 and 100 (a percentage of any value can be calculated 
with the formula (CURRENT_Value / MAXIMUM_value) * 100), so, for example, 
you can use this to display power, health, mana, time or anything else that 
would benefit from a bar display. 

 You can set various different things that change the visual aspect of 
 the bar and these are illustrated in the image below (note that the 
 colors used here are c_green for the maximum value and c_red for the 
 minimum value, but you can use the colors that you wish): 
*/



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>711</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_life</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>vidaPlayer</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>714</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_life_images</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>420</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>27</string>
          </argument>
          <argument>
            <kind>5</kind>
            <sprite>spr_icoNave</sprite>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desarrollador
//draw_set_font( fnt_desarrollador);
//draw_set_color( c_white);

/*
if(keyboard_check( vk_f1)){
    draw_text( 10, 20, "Rocas: " + string(instance_number( o_roca)));
    draw_text( 10, 40, "Balas Player: " + string(instance_number( o_bala)));
    draw_text( 10, 60, "Enemigos: " + string(instance_number( o_parentEnemy)));
    draw_text( 10, 80, "Balas Enemigos: " + string(instance_number( o_parentBalaEnemy)));
    draw_text( 10, 100,"Nivel Juego: " + string( nivelJuego));
    draw_text( 10, 120,"Alarma 0: " +  string( alarm[0]));
    draw_text( 10, 140,"Alarma 1: " + string( alarm[1]));
    draw_text( 10, 160,"Alarma 2: " + string( alarm[2]));
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
